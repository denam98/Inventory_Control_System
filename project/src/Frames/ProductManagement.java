/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import UtilityClasses.DBConnection;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author B.M.D.C.Bandara
 */
public class ProductManagement extends javax.swing.JFrame {

    int updatingId;
    boolean updateProceder = false;

    Home currHome;
    
    /**
     * Creates new form ProductManagement
     */
    public ProductManagement() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.out.println(ex);
        }
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        txt_itemname.grabFocus();
        loadTableData(jTable1, "item");
        jScrollPane3.setVisible(false);
        setImg(new File("pics/backW.png"), lab_back);
    }

    ProductManagement(Home aThis) {
        this();
        currHome = aThis;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_itemname = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        rb_active = new javax.swing.JRadioButton();
        rb_inactive = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        but_save = new javax.swing.JButton();
        but_search = new javax.swing.JButton();
        but_update = new javax.swing.JButton();
        but_delete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        lab_back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 768));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1366, 768));
        setResizable(false);

        kGradientPanel1.setkEndColor(new java.awt.Color(153, 204, 255));
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 255, 255));
        kGradientPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Product Management");
        kGradientPanel1.add(jLabel1);
        jLabel1.setBounds(6, 6, 499, 74);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Item Name");
        kGradientPanel1.add(jLabel2);
        jLabel2.setBounds(140, 110, 150, 32);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("Description");
        kGradientPanel1.add(jLabel3);
        jLabel3.setBounds(140, 170, 150, 32);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setText("Status");
        kGradientPanel1.add(jLabel5);
        jLabel5.setBounds(140, 260, 150, 32);

        txt_itemname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_itemnameActionPerformed(evt);
            }
        });
        txt_itemname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_itemnameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_itemnameKeyReleased(evt);
            }
        });
        kGradientPanel1.add(txt_itemname);
        txt_itemname.setBounds(360, 120, 442, 32);

        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        kGradientPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(360, 150, 440, 131);

        buttonGroup1.add(rb_active);
        rb_active.setText("Active");
        rb_active.setOpaque(false);
        rb_active.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rb_activeKeyPressed(evt);
            }
        });
        kGradientPanel1.add(rb_active);
        rb_active.setBounds(360, 270, 67, 28);

        buttonGroup1.add(rb_inactive);
        rb_inactive.setText("Inactive");
        rb_inactive.setOpaque(false);
        rb_inactive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rb_inactiveKeyPressed(evt);
            }
        });
        kGradientPanel1.add(rb_inactive);
        rb_inactive.setBounds(440, 270, 76, 28);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "DESCRIPTION", "QTY", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setIntercellSpacing(new java.awt.Dimension(2, 4));
        jTable1.setRowHeight(25);
        jTable1.setRowMargin(4);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowVerticalLines(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        kGradientPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 360, 960, 348);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        kGradientPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(360, 170, 442, 83);

        but_save.setBackground(new java.awt.Color(255, 255, 255));
        but_save.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        but_save.setText("Save");
        but_save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_saveActionPerformed(evt);
            }
        });
        kGradientPanel1.add(but_save);
        but_save.setBounds(1070, 130, 246, 93);

        but_search.setBackground(new java.awt.Color(255, 255, 255));
        but_search.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        but_search.setText("Search");
        but_search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_searchActionPerformed(evt);
            }
        });
        kGradientPanel1.add(but_search);
        but_search.setBounds(1070, 270, 246, 93);

        but_update.setBackground(new java.awt.Color(255, 255, 255));
        but_update.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        but_update.setText("Update");
        but_update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_updateActionPerformed(evt);
            }
        });
        kGradientPanel1.add(but_update);
        but_update.setBounds(1070, 410, 246, 93);

        but_delete.setBackground(new java.awt.Color(255, 255, 255));
        but_delete.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        but_delete.setText("Delete");
        but_delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        but_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_deleteActionPerformed(evt);
            }
        });
        kGradientPanel1.add(but_delete);
        but_delete.setBounds(1070, 550, 246, 93);

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        kGradientPanel1.add(jSeparator1);
        jSeparator1.setBounds(1010, 100, 30, 620);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Reset All");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        kGradientPanel1.add(jButton1);
        jButton1.setBounds(840, 320, 140, 32);

        lab_back.setText("jLabel4");
        lab_back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lab_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_backMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_backMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_backMouseExited(evt);
            }
        });
        kGradientPanel1.add(lab_back);
        lab_back.setBounds(1310, 10, 41, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1366, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_itemnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_itemnameActionPerformed
        if (!txt_itemname.getText().trim().equals("")) {
            jTextArea1.grabFocus();
        }
    }//GEN-LAST:event_txt_itemnameActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            rb_active.grabFocus();
        }
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void rb_activeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rb_activeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rb_active.setSelected(true);
            but_save.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            rb_inactive.grabFocus();
        }
    }//GEN-LAST:event_rb_activeKeyPressed

    private void rb_inactiveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rb_inactiveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rb_inactive.setSelected(true);
            but_save.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            rb_active.grabFocus();
        }
    }//GEN-LAST:event_rb_inactiveKeyPressed

    private void but_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_saveActionPerformed
        if (txt_itemname.getText().trim().equals("")) {
            txt_itemname.grabFocus();
        } else {
            if (jTextArea1.getText().trim().equals("")) {
                jTextArea1.grabFocus();
            } else {
                addItem();
            }
        }
    }//GEN-LAST:event_but_saveActionPerformed

    private void but_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_deleteActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        if (jTable1.getSelectedRow() != -1) {
            int showConfirmDialog = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to "
                    + "delete the selected item?", null, JOptionPane.OK_CANCEL_OPTION);
            if (showConfirmDialog == JOptionPane.OK_OPTION) {
                try {
                    DBConnection.iud("delete from item where id='" + jTable1.getValueAt(jTable1.getSelectedRow(), 0) + "'");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                loadTableData(jTable1, "item");
                JOptionPane.showMessageDialog(rootPane, "Item deleted successfully!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select an item from the table to delete.", null, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_but_deleteActionPerformed

    private void but_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_updateActionPerformed
        if (!txt_itemname.getText().trim().equals("") && !jTextArea1.getText().trim().equals("") && updateProceder) {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int showConfirmDialog = JOptionPane.showConfirmDialog(rootPane, "Do you want to "
                    + "update the selected item?", null, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (showConfirmDialog == JOptionPane.YES_OPTION) {
                try {
                    int stat = (rb_active.isSelected()) ? 1 : 0;
                    DBConnection.iud("update item set name='" + txt_itemname.getText().toLowerCase() + "',"
                            + " description='" + jTextArea1.getText().toLowerCase() + "', status='" + stat + "'"
                            + " where id='" + updatingId + "'");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                loadTableData(jTable1, "item");
                JOptionPane.showMessageDialog(rootPane, "Item updated successfully!");
                clearFields();
                updateProceder = false;
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select an item from the table and update contents first.");
        }
    }//GEN-LAST:event_but_updateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            loadDataToFields();
            updateProceder = true;
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void but_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_searchActionPerformed
        if(!txt_itemname.getText().trim().equals("")){
            try {
                ResultSet search = DBConnection.search("select * from item where name like '%"+txt_itemname.getText()+"%'");
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                dtm.setRowCount(0);
                Vector v;
                while(search.next()){
                    v = new Vector();
                    v.add(search.getString("id"));
                    v.add(search.getString("name"));
                    v.add(search.getString("description"));
                    String stat = (search.getBoolean("status")) ? "Active" : "Inactive";
                    v.add(stat);
                    dtm.addRow(v);
                }
                
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Type the item name to search.");
            txt_itemname.grabFocus();
        }
    }//GEN-LAST:event_but_searchActionPerformed

    private void txt_itemnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_itemnameKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_DOWN){
            jScrollPane3.setVisible(true);
            jList1.grabFocus();
            jList1.setSelectedIndex(0);
        }
    }//GEN-LAST:event_txt_itemnameKeyPressed

    private void txt_itemnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_itemnameKeyReleased
        try {
            ResultSet search = DBConnection.search("select * from item where name like '%"+txt_itemname.getText().toLowerCase()+"%'");
            Vector v = new Vector();
            jList1.removeAll();
            while(search.next()){
                v.add(search.getString("id") + "\t-\t" +search.getString("name"));
            }
            jList1.setListData(v);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txt_itemnameKeyReleased

    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id = jList1.getSelectedValue().split("-")[0].trim();
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            try{
                ResultSet search = DBConnection.search("select * from item where id='"+id+"'");
                dtm.setRowCount(0);
                if(search.first()){
                    Vector v = new Vector();
                    v.add(search.getString("id"));
                    v.add(search.getString("name"));
                    v.add(search.getString("description"));
                    String stat = (search.getBoolean("status")) ? "Active" : "Inactive";
                    v.add(stat);
                    dtm.addRow(v);
                    jScrollPane3.setVisible(false);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearFields();
        loadTableData(jTable1, "item");
        txt_itemname.grabFocus();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lab_backMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_backMouseExited
        setImg(new File("pics/backW.png"), lab_back);
    }//GEN-LAST:event_lab_backMouseExited

    private void lab_backMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_backMouseEntered
        setImg(new File("pics/backB.png"), lab_back);
    }//GEN-LAST:event_lab_backMouseEntered

    private void lab_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_backMouseClicked
        this.setVisible(false);
        currHome.setVisible(true);
    }//GEN-LAST:event_lab_backMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_delete;
    private javax.swing.JButton but_save;
    private javax.swing.JButton but_search;
    private javax.swing.JButton but_update;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private keeptoo.KGradientPanel kGradientPanel1;
    public javax.swing.JLabel lab_back;
    private javax.swing.JRadioButton rb_active;
    private javax.swing.JRadioButton rb_inactive;
    private javax.swing.JTextField txt_itemname;
    // End of variables declaration//GEN-END:variables

    private void loadTableData(JTable interface_table, String db_table) {
        try {
            ResultSet search = DBConnection.search("select i.*,s.qty from " + db_table + " i inner join stock s on i.id=s.item_id");
            DefaultTableModel dtm = (DefaultTableModel) interface_table.getModel();
            dtm.setRowCount(0);
            Vector v;
            while (search.next()) {
                v = new Vector();
                v.add(search.getString("id"));
                v.add(search.getString("name"));
                v.add(search.getString("description"));
                v.add(search.getString("qty"));
                String stat = (search.getBoolean("status")) ? "Active" : "Inactive";
                v.add(stat);
                dtm.addRow(v);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void clearFields() {
        txt_itemname.setText(null);
        jTextArea1.setText(null);
        buttonGroup1.clearSelection();
    }

    private void addItem() {
        int stat = (rb_active.isSelected()) ? 1 : 0;
        try {
            int itemid;
            DBConnection.iud("insert into item(name,description,status) values"
                    + "('" + txt_itemname.getText() + "','" + jTextArea1.getText() + "','" + stat + "')");
            ResultSet search = DBConnection.search("select id from item");
            if(search.last()){
                itemid = search.getInt("id");
                DBConnection.iud("insert into stock(item_id,qty,buying_price,selling_price) values('"+itemid+"','0','0','0')");
            }
            loadTableData(jTable1, "item");
            JOptionPane.showMessageDialog(rootPane, "New item added successfully!");
            clearFields();
            txt_itemname.grabFocus();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadDataToFields() {
        updatingId = Integer.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        String name = jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString();
        String description = jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString();
        boolean stat = (jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString().equals("Active")) ? true : false;

        txt_itemname.setText(name);
        jTextArea1.setText(description);
        if (stat) {
            rb_active.setSelected(true);
        } else {
            rb_inactive.setSelected(true);
        }
    }
    
    private void setImg(File f, JLabel lab){
        try {
            Image img = ImageIO.read(f);
            img = img.getScaledInstance(lab.getWidth(), lab.getHeight(), Image.SCALE_SMOOTH);
            lab.setIcon(new ImageIcon(img));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}
